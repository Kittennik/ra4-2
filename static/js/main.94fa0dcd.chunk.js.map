{"version":3,"sources":["model/TrainingModel.js","components/Validation.js","components/AddForm.js","components/TrainingItem.js","components/List.js","components/TrainingBase.js","App.js","serviceWorker.js","index.js"],"names":["TrainingModel","date","distance","this","id","nanoid","Validation","props","msg","className","AddForm","form","onSubmit","onChange","useState","validateErr","setValidateErr","handleChange","event","target","name","value","prevValidateErr","checkValue","evt","regexpDate","match","onBlur","type","onClick","preventDefault","TrainingItem","item","moment","format","toFixed","title","onEdit","onRemove","List","trainings","sortedTrainings","sort","a","b","Date","parse","map","o","key","TrainingBase","setTrainings","editingID","setEditingID","setForm","prevForm","mDate","isValid","toDate","oldDate","find","prevTrainings","valueOf","Number","filter","training","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.94fa0dcd.chunk.js","sourcesContent":["import {nanoid} from 'nanoid';\n\nexport default class TrainingModel {\n  constructor(date, distance) {\n    this.id = nanoid();\n    this.date = date;\n    this.distance = distance;\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Validation(props) {\n  const { msg } = props;\n\n  return (\n    <div className=\"validate\">\n      <p>{msg}</p>\n    </div>\n  );\n}\n\nValidation.propTypes = {\n  msg: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport Validation from './Validation';\n\nexport default function AddForm(props) {\n  const { form, onSubmit, onChange } = props;\n  const [validateErr, setValidateErr] = useState({\n        date: false,\n        distance: false,\n      });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setValidateErr((prevValidateErr) => ({ ...prevValidateErr, [name]: false }));\n    onChange( name, value );\n  };\n\n  const checkValue = (evt) => {\n        const { name, value } = evt.target;\n        let regexpDate;\n    \n        if (name === 'date') {\n          regexpDate = /^(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[012])\\.\\d\\d$/;\n        } else if (name === 'distance') {\n          regexpDate = /^\\d+([.]\\d+)?(км)?$/g;\n        }\n    \n        if (!value.match(regexpDate)) {\n          setValidateErr((prevValidateErr) => ({ ...prevValidateErr, [name]: true }));\n        }\n      };\n  \n   const handleSubmit = (event) => {\n    event.preventDefault();\n    if (form.date && form.distance) {\n      if (!validateErr.date && !validateErr.distance) {\n        onSubmit();\n       }\n    }\n  }\n\n  return (\n        <form className=\"form-add\">\n          <label>Дата (ДД.ММ.ГГ)\n            <input name=\"date\" value={form.date} onChange={handleChange} onBlur={checkValue} />\n            {validateErr.date && <Validation msg={'Введите дату в формате ДД.ММ.ГГ'} />}\n          </label>\n          <label>Пройдено км\n            <input name=\"distance\" value={form.distance} onChange={handleChange} onBlur={checkValue}/>\n            {validateErr.distance && <Validation msg={'Введите дистанцию (допускаются только числовые значения)'} />}\n          </label>\n          <input type=\"button\" value=\"OK\" onClick={handleSubmit} />\n        </form>\n      );\n}\n\nAddForm.propTypes = {\n  form: PropTypes.object.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TrainingModel from '../model/TrainingModel';\nimport moment from 'moment';\n\nexport default function TrainingItem(props) {\n  const { date, distance } = props.item;\n\n  return (\n    <table>\n        <thead>\n          <tr>\n            <td>{moment(date).format('DD.MM.YY')}</td>\n            <td>{distance.toFixed(1)}</td>\n            <td className='change' title='Change' onClick={props.onEdit}>Edit</td>\n            <td className='delete' title='Delete' onClick={props.onRemove}>X</td>\n          </tr>\n        </thead>\n    </table>\n    )\n}\n\nTrainingItem.propTypes = {\n  item: PropTypes.instanceOf(TrainingModel).isRequired,\n  onChange: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TrainingItem from './TrainingItem'\n\nexport default function List(props) {\n  const { trainings } = props;\n\n  const handleEdit = (id) => props.onEdit(id);\n  const handleRemove = (id) => props.onRemove(id);\n\n  const sortedTrainings = trainings.sort((a, b) => {\n    if (Date.parse(a.date) < Date.parse(b.date)) return 1;\n    return -1;\n  });\n\n  return (\n    <>\n    <table>\n        <thead>\n          <tr>\n            <td>Дата (ДД.ММ.ГГ)</td>\n            <td>Пройдено км</td>\n            <td>Действия</td>\n          </tr>\n        </thead>\n        <tbody>\n      {sortedTrainings.map((o) => \n        <TrainingItem\n        item={o}\n        onEdit={() => handleEdit(o.id)}\n        onRemove={() => handleRemove(o.id)}\n        key={o.id}\n        />\n        )\n      }\n      </tbody>\n      </table>\n    </>\n  );\n}\n\nList.propTypes = {\n  trainings: PropTypes.object.isRequired,\n  onRemove: PropTypes.func.isRequired,\n  onEdit: PropTypes.func.isRequired,\n};\n\n","import React, { useState } from 'react';\nimport TrainingModel from '../model/TrainingModel';\nimport AddForm from './AddForm';\nimport List from './List';\nimport moment from 'moment';\n\nexport default function TrainingBase(props) {\n  const [ trainings, setTrainings ] = useState([]);\n  const [ editingID, setEditingID ] = useState();\n  const [ form, setForm ] = useState({ date: '', distance: '' });\n\n  const handleChange = (name, value) => {\n    setForm(prevForm => ({...prevForm, [name]: value}));\n  };\n\n  const handleSubmit = () => {\n    const { distance } = form;\n    const mDate = moment(form.date, 'DD.MM.YY', true);\n    if (!mDate.isValid()) return;\n    const date = mDate.toDate();\n\n    if (editingID) {\n      const oldDate = trainings.find((o) => o.id === editingID).date;\n      setTrainings((prevTrainings) => prevTrainings.map((o) => {\n        if (o.date.valueOf() === oldDate.valueOf()) return new TrainingModel(date, Number(distance));\n        return o;\n      }));\n    } else {\n      if (trainings.find((o) => o.date.valueOf() === date.valueOf())) {\n        setTrainings((prevTrainings) => prevTrainings.map((o) => {\n          if (o.date.valueOf() === date.valueOf()) return new TrainingModel(date, Number(distance) + o.distance);\n          return o;\n        }));\n      } else {\n        setTrainings((prevTrainings) => [...prevTrainings, new TrainingModel(date, Number(distance))]);\n      }\n    }\n    \n    setForm({ date: '', distance: '' });\n    setEditingID(null);\n  }\n\n  const handleRemove = (id) => {\n    setTrainings((prevTrainings) => prevTrainings.filter((o) => o.id !== id));\n  }\n\n  const handleEdit = (id) => {\n    const training = trainings.find((o) => o.id === id);\n    setEditingID(training.id);\n    setForm({ date: moment(training.date).format('DD.MM.YY'), distance: training.distance });\n  }\n\n  return (\n    <>\n      <AddForm\n        form={form}\n        onChange={handleChange}\n        onSubmit={handleSubmit}\n      />\n      <List trainings={trainings} onRemove={handleRemove} onEdit={handleEdit} />\n    </>  \n  )\n}","import React from 'react';\nimport './App.css';\nimport TrainingBase from './components/TrainingBase';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <TrainingBase />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}